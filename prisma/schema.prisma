datasource db {
  provider = "postgresql"
  url      = "postgresql://eshop:BonerFart99@172.17.0.2:5432/eshop"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  emailVerified Boolean @default(false)
  image   String?
  accounts  Account[]
  sessions  Session[]
  password String
  carts    Cart[]
  posts    Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String
  published Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}

model Cart {
  id     Int        @id @default(autoincrement())
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  items  CartItem[]
}

model CartItem {
  id        Int  @id @default(autoincrement())
  cart      Cart @relation(fields: [cartId], references: [id])
  cartId    Int
  productId Int
  quantity  Int
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  price       String
  description String?
  image       String?
}

model Schedule {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  startDate    DateTime
  endDate      DateTime
  shifts       Shift[]        @relation("ScheduleShifts")
  workers      Worker[]       @relation("ScheduleWorkers")
  Notification Notification[]
  Report       Report[]
}

model Shift {
  id         Int      @id @default(autoincrement())
  scheduleId Int
  workerId   Int
  start      DateTime
  end        DateTime
  schedule   Schedule @relation("ScheduleShifts", fields: [scheduleId], references: [id])
  worker     Worker   @relation("WorkerShifts", fields: [workerId], references: [id])
}

model Worker {
  id              Int            @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  availability    Availability[]
  timeOffRequests TimeOff[]
  shifts          Shift[]        @relation("WorkerShifts")
  schedules       Schedule[]     @relation("ScheduleWorkers")
}

model Availability {
  id       Int      @id @default(autoincrement())
  workerId Int
  start    DateTime
  end      DateTime
  worker   Worker   @relation(fields: [workerId], references: [id])
}

model TimeOff {
  id       Int      @id @default(autoincrement())
  workerId Int
  start    DateTime
  end      DateTime
  approved Boolean?
  worker   Worker   @relation(fields: [workerId], references: [id])
}

model Notification {
  id         Int      @id @default(autoincrement())
  scheduleId Int
  content    String
  createdAt  DateTime @default(now())
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}


model Report {
  id         Int      @id @default(autoincrement())
  scheduleId Int
  type       String
  data       Json
  createdAt  DateTime @default(now())
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

generator client {
  provider = "prisma-client-js"
}
